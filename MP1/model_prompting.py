import jsonlines
import sys
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig
import re
import textwrap

#####################################################
# Please finish all TODOs in this file for MP1;
# do not change other code/formatting.
#####################################################

def save_file(content, file_path):
    with open(file_path, 'w') as file:
        file.write(content)

def prompt_model(dataset, model_name = "deepseek-ai/deepseek-coder-6.7b-base", quantization = True):
    print(f"Working with {model_name} quantization {quantization}...")

    if quantization:
        # TODO: load the model with quantization
        bnb_cfg = BitsAndBytesConfig(
            load_in_4bit=True,
            bnb_4bit_quant_type="nf4",
            bnb_4bit_use_double_quant=True,
            bnb_4bit_compute_dtype=torch.bfloat16,
        )
        model = AutoModelForCausalLM.from_pretrained(
            model_name,
            device_map="auto",
            quantization_config=bnb_cfg,
        )
    else:
        # TODO: load the model without quantization
        model = AutoModelForCausalLM.from_pretrained(
            model_name,
            torch_dtype=torch.bfloat16,  # or torch.float16 if preferred
            device_map="auto",
        )

    print(f"Working with {model} quantization {quantization}...")
    tokenizer = AutoTokenizer.from_pretrained(model_name)

    results = []
    results_processed = []
    for case in dataset:
        prompt = case['prompt']
        entry_point = case['entry_point']
        
        print(f"Prompting with {prompt}...")

        # TODO: prompt the model and get the response
        input = tokenizer(prompt, return_tensors="pt").to(model.device)
        output = model.generate(**input, max_new_tokens=128)
        response = tokenizer.decode(output[0], skip_special_tokens=True)
        
        print(f"Task_ID {case['task_id']}:\nPrompt:\n{prompt}\nResponse:\n{response}")
        results.append(dict(task_id=case["task_id"], completion=response))
        
        # TODO: postprocessing may be required to handle extraneous output, fix indentation issues generated by the model, or handle other similar, trivial issues
        func_pattern = re.compile(rf"(def {entry_point}\(.*\):[\s\S]+?)(?:(?=\ndef )|$)")
        match = func_pattern.search(response)
        if match:
            response_processed = textwrap.dedent(match.group(1)).strip()
        else:
            # fallback: try to extract at least the function header
            header_pattern = re.compile(rf"(def {entry_point}\(.*\):)")
            header_match = header_pattern.search(response)
            response_processed = header_match.group(1) if header_match else ""
        
        response_processed = ""
        results_processed.append(dict(task_id=case["task_id"], completion=response_processed))
    return results, results_processed

def read_jsonl(file_path):
    dataset = []
    with jsonlines.open(file_path) as reader:
        for line in reader: 
            dataset.append(line)
    return dataset

def write_jsonl(results, file_path):
    with jsonlines.open(file_path, "w") as f:
        for item in results:
            f.write_all([item])

if __name__ == "__main__":
    """
    This Python script is to run prompt LLMs for code synthesis.
    Usage:
    `python3 model_prompting.py <input_dataset> <model> <output_file> <output_file_processed> <if_quantization> `|& tee prompt.log

    Inputs:
    - <input_dataset>: A `.jsonl` file, which should be your team's dataset containing 20 HumanEval problems.
    - <model>: Specify the model to use. Options are "deepseek-ai/deepseek-coder-6.7b-base" or "deepseek-ai/deepseek-coder-6.7b-instruct".
    - <output_file>: A `.jsonl` file where the results will be saved.
    - <output_file_processed>: A `.jsonl` file where the processed results will be saved
    - <if_quantization>: Set to 'True' or 'False' to enable or disable model quantization.
    
    Outputs:
    - You can check <output_file> and  <output_file_processed> for detailed information.
    """
    args = sys.argv[1:]
    input_dataset = args[0]
    model = args[1]
    output_file = args[2]
    output_file_processed = args[3]
    if_quantization = args[4] # True or False
    
    if not input_dataset.endswith(".jsonl"):
        raise ValueError(f"{input_dataset} should be a `.jsonl` file!")
    
    if not output_file.endswith(".jsonl"):
        raise ValueError(f"{output_file} should be a `.jsonl` file!")
    
    quantization = True if if_quantization == "True" else False
    
    dataset = read_jsonl(input_dataset)
    results, results_processed = prompt_model(dataset, model, quantization)
    write_jsonl(results, output_file)
    write_jsonl(results_processed, output_file_processed)
